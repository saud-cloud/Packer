{
  "variables" : {
        "packer.version"        : ">= 1.2",

        "instance.region"       : null,
        "instance.iam_profile"  : "",
        "instance.type"         : "t2.large",
        "instance.port"         : "5985",
        "instance.ssh.keypair"      : "",
        "instance.ssh.password"     : "",
        "instance.ssh.private_key"  : "",
        "instance.ssh.agent_auth"   : "false",
        "instance.winrm.use_ssl"    : "false",

        "net.container"         : "",
        "net.subnet"            : "",
        "net.assign_public_ip"  : "false",
        "net.security_groups"   : "",
        "net.ssh_interface"     : "",

        "image.id"              : null,
        "image.name"            : null,
        "image.virt"            : "hvm",
        "image.login"           : null,
        "image.copies"          : "",
        "image.users"           : "",
        "image.groups"          : "",
        "image.delete_existing" : "false",
        "image.delete_snapshot" : "true",
        "image.latest"          : "true",

        "disk0.device"          : "/dev/xvda",
        "disk0.size"            : "0",
        "disk0.type"            : "gp2",
        "disk0.encrypt"         : "false",
        "disk0.delete"          : "true",

        "disk1.device"          : "/dev/xvdf",
        "disk1.size"            : "4",
        "disk1.type"            : "gp2",
        "disk1.encrypt"         : "false",
        "disk1.delete"          : "false",
        "disk1.disable"         : "false",

        "os.vendor"             : null,
        "os.release"            : null,
        "os.arch"               : null,
        "os.tmpdir"             : null,
        "os.pkg.cmd"            : null,
        "os.pkg.suffix"         : null,
        "os.repo"               : "",
        "os.repo.cmd"           : "",
        "os.repo.version"       : "",

        "project"               : null,
        "layer"                 : "base",
        "role"                  : "none",

        "factory.basedir"       : null,
        "ansible.basedir"       : null,
        "ansible.timeout"       : "90",
        "reboot.timeout"        : "45m",
        "connect.timeout"       : "10m",

        "build.branch"          : "{{env `BUILD_BRANCH`}}",
        "build.commit"          : "{{env `BUILD_COMMIT`}}",
        "build.number"          : "{{env `BUILD_NUMBER`}}",

        "comment_debug"         : "FIXME expose .Debug from Packer internals",
        "provision.debug"       : "0",
        "provision.verbose"     : "0",
        "provision.shebang"     : "/bin/bash -e",
        "comment_tmpdir"        : "FIXME expose .TmpDir from packer.ConfigTmpDir()",
        "provision.tmpdir"      : "{{env `TEMP`}}",
        "provision.uuid"        : "{{env `PACKER_RUN_UUID`}}"
  },

  "builders" : [
    {
        "type"                  : "amazon-ebs",
        "communicator"          : "winrm",

        "winrm_use_ssl"         : false,
        "winrm_username"        : "{{user `image.login`}}",
        "winrm_timeout"         : "{{user `connect.timeout`}}",
        "winrm_port"            : "{{user `instance.port`}}",

        "ssh_username"          : "{{user `image.login`}}",
        "ssh_interface"         : "{{user `net.ssh.interface`}}",
        "ssh_keypair_name"      : "{{user `instance.ssh.keypair`}}",
        "ssh_password"          : "{{user `instance.ssh.password`}}",
        "ssh_private_key_file"  : "{{user `instance.ssh.private_key`}}",
        "ssh_agent_auth"        : "{{user `instance.ssh.agent_auth`}}",
        "ssh_timeout"           : "{{user `connect.timeout`}}",

        "user_data_file"        : "{{user `factory.basedir`}}/user-data/winrm",

        "region"                : "{{user `instance.region`}}",
        "instance_type"         : "{{user `instance.type`}}",
        "iam_instance_profile"  : "{{user `instance.iam_profile`}}",
        "encrypt_boot"          : "{{user `disk0.encrypt`}}",
        "vpc_id"                : "{{user `net.container`}}",
        "subnet_id"             : "{{user `net.subnet`}}",
        "security_group_ids"    : "{{user `net.security_groups`}}",
        "associate_public_ip_address" : "{{user `net.assign_public_ip`}}",

        "ami_name"              : "{{user `project`}} [{{user `layer`}}-{{user `role`}}] {{user `os.vendor`}} {{user `os.kernel`}}-{{user `os.release`}} ({{user `build.number`}})",
        "ami_description"       : "{{user `image.description`}}",
        "ami_regions"           : "{{user `image.copies`}}",
        "ami_users"             : "{{user `image.users`}}",
        "ami_groups"            : "{{user `image.groups`}}",
        "force_deregister"      : "{{user `image.delete_existing`}}",
        "force_delete_snapshot" : "{{user `image.delete_snapshot`}}",

        "run_tags" : {
            "Name"              : "{{build_name}}: {{user `project`}} [{{user `layer`}}-{{user `role`}}]",
            "owner"             : "Packer.IO",
            "uuid"              : "{{user `provision.uuid`}}"
        },
        "run_volume_tags" : {
            "owner"             : "Packer.IO",
            "uuid"              : "{{user `provision.uuid`}}"
        },
        "tags" : {
            "project"           : "{{user `project`}}",
            "layer"             : "{{user `layer`}}",
            "role"              : "{{user `role`}}",
            "commit"            : "{{user `build.commit`}}",
            "branch"            : "{{user `build.branch`}}",
            "version"           : "{{user `build.number`}}",
            "os.vendor"         : "{{user `os.vendor`}}",
            "os.family"         : "{{user `os.family`}}",
            "os.release"        : "{{user `os.release`}}",
            "os.arch"           : "{{user `os.arch`}}"
        },

        "source_ami"            : "{{user `image.id`}}",
        "source_ami_filter" : {
            "filters" : {
                "name"                  : "{{user `image.name`}}",
                "root-device-type"      : "ebs",
                "virtualization-type"   : "{{ user `image.virt`}}"
            },
            "owners"            : "{{user `image.owner`}}",
            "most_recent"       : "{{user `image.latest`}}"
        },

        "launch_block_device_mappings" : [
          {
            "no_device"         : false,
            "device_name"       : "{{user `disk0.device`}}",
            "volume_size"       : "{{user `disk0.size`}}",
            "volume_type"       : "{{user `disk0.type`}}",
            "encrypted"         : "{{user `disk0.encrypt`}}",
            "delete_on_termination" : "{{user `disk0.delete`}}"
          },
          {
            "no_device"         : "{{user `disk1.disable`}}",
            "device_name"       : "{{user `disk1.device`}}",
            "volume_size"       : "{{user `disk1.size`}}",
            "volume_type"       : "{{user `disk1.type`}}",
            "encrypted"         : "{{user `disk1.encrypt`}}",
            "delete_on_termination" : "{{user `disk1.delete`}}"
          }
        ]
    }
  ],

  "provisioners" : [
    {
        "type"                  : "file",
        "source"                : "{{user `factory.basedir`}}/scripts",
        "destination"           : "{{user `os.tmpdir`}}"
    },
    {
        "type"                  : "powershell",
        "inline" : [
            "$global:ConfirmPreference = 'None'",
            "$global:ErrorActionPreference = 'Continue'",
            "#$global:DebugPreference = 'Continue'",
            "#$global:VerbosePreference = 'Continue'",
            "$global:InformationPreference = 'Continue'",

            "cd {{user `os.tmpdir`}}",

            "$cmd = 'Install-PackageProvider'",
            "$cmdArgs = @{ Name='NuGet'; MinimumVersion='2.8.5.201'; Scope='CurrentUser' }",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs -Force | Out-Host",

            "#./scripts/package-7zip.ps1",
            "#Import-Module -Name 7Zip4Powershell",
            "# static-linked port of wget",
            "#wget 'https://eternallybored.org/misc/wget/1.20/64/wget.exe'"
        ]
    },
    {
        "type"                  : "powershell",
        "inline" : [
            "$global:ConfirmPreference = 'None'",
            "$global:ErrorActionPreference = 'Continue'",
            "$global:ProgressPreference = 'SilentlyContinue'",
            "$global:DebugPreference = 'Continue'",
            "$global:VerbosePreference = 'Continue'",
            "$global:InformationPreference = 'Continue'",

            "cd {{user `os.tmpdir`}}",
            "$cmd = 'scripts/install.ps1'",

            "# any value with spaces or special chars (eg. +/-) MUST be quoted",
            "# ditto empty values which result in dangling '=' cause a parse error.",
            "# TODO use GoLang template IF, or you MUST define all args as ''",

            "$cmdArgs = @{ Name={{user `aws-cli.label`}}; InstallArgs={{user `aws-cli.install.args`}}; FetchArgs={{user `aws-cli.fetch.args`}} }",
            "[String[]] $urls = {{user `aws-cli.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs @urls | Out-Host",

            "#gratuitous on Amazon-supplied AMI",
	    "# 2020-05-07 mossc added following lines to get around tls1.2",
            "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
            "Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force",
            "Set-PSRepository -Name PSGallery -InstallationPolicy Trusted",
            "Install-Module PowerShellGet -RequiredVersion 2.2.4 -SkipPublisherCheck",
            "Install-Module -Name AWSPowerShell",

            "$cmdArgs = @{ Name={{user `aws-cloudwatch.label`}}; InstallArgs={{user `aws-cloudwatch.install.args`}}; FetchArgs={{user `aws-cloudwatch.fetch.args`}} }",
            "[String[]] $urls = {{user `aws-cloudwatch.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs @urls | Out-Host",

            "$cmdArgs = @{ Name={{user `aws-ssm.label`}}; InstallArgs={{user `aws-ssm.install.args`}}; FetchArgs={{user `aws-ssm.fetch.args`}} }",
            "[String[]] $urls = {{user `aws-ssm.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs @urls | Out-Host",

            "$cmdArgs = @{ Name={{user `aws-inspector.label`}}; InstallArgs={{user `aws-inspector.install.args`}}; FetchArgs={{user `aws-inspector.fetch.args`}} }",
            "[String[]] $urls = {{user `aws-inspector.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs @urls | Out-Host"
        ]
    },
    {
        "type"                  : "powershell",
        "inline" : [
            "$global:ConfirmPreference = 'None'",
            "$global:ErrorActionPreference = 'Continue'",
            "$global:ProgressPreference = 'SilentlyContinue'",
            "$global:DebugPreference = 'Continue'",
            "$global:VerbosePreference = 'Continue'",
            "$global:InformationPreference = 'Continue'",

            "cd {{user `os.tmpdir`}}",
            "$cmd = 'scripts/install.ps1'",

            "$cmdArgs = @{ Name={{user `ibm-bigfix.label`}}; InstallArgs={{user `ibm-bigfix.install.args`}}; FetchArgs={{user `ibm-bigfix.fetch.args`}} }",
            "[String[]] $urls = {{user `ibm-bigfix.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "#TODO did C:/Program Files/BigFix Enterprise/BES Client/actionsite.afxm get placed?",
            "& $cmd @cmdArgs @urls | Out-Host",

            "$cmdArgs = @{ Name={{user `symantec-endpoint.label`}}; InstallArgs={{user `symantec-endpoint.install.args`}}; FetchArgs={{user `symantec-endpoint.fetch.args`}} }",
            "[String[]] $urls = {{user `symantec-endpoint.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs @urls | Out-Host",

            "$cmdArgs = @{ Name={{user `microsoft-sccm.label`}}; InstallCmd={{user `microsoft-sccm.install`}}; InstallArgs={{user `microsoft-sccm.install.args`}}; FetchArgs={{user `microsoft-sccm.fetch.args`}} }",
            "[String[]] $urls = {{user `microsoft-sccm.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs @urls | Out-Host",

            "$cmdArgs = @{ Name={{user `hid-activclient.label`}} }",
            "[String[]] $urls = {{user `hid-activclient.url`}}",
            "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
            "& $cmd @cmdArgs @urls | Out-Host"
        ]
    },
    {
        "type"                  : "powershell",
        "elevated_user"         : "{{user `image.login`}}",
        "elevated_password"     : "{{.WinRMPassword}}",
        "inline" : [
            "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
            "$global:ConfirmPreference = 'None'",
            "$global:ErrorActionPreference = 'Continue'",
            "$global:ProgressPreference = 'SilentlyContinue'",
            "$global:DebugPreference = 'SilentlyContinue'",
            "$global:VerbosePreference = 'Continue'",
            "$global:InformationPreference = 'Continue'",

            "cd {{user `os.tmpdir`}}",

            "#TODO replace with debloat-windows/scripts/disable-windows-defender.ps1",
            "$cmd = 'scripts/windows-defender.ps1'",
            "\"$cmd\" | Write-Verbose",
            "& $cmd | Out-Host",

            "$cmd = 'scripts/windows-update.ps1'",
            "\"$cmd\" | Write-Verbose",
            "& $cmd -Install -Severity 'Critical,Important' | Out-Host"
        ]
    },
    {
        "type"                  : "windows-restart",
        "restart_timeout"       : "{{user `reboot.timeout`}}"
    },
    {
        "type"                  : "powershell",
        "elevated_user"         : "{{user `image.login`}}",
        "elevated_password"     : "{{.WinRMPassword}}",
        "inline" : [
            "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
            "$global:ConfirmPreference = 'None'",
            "$global:ErrorActionPreference = 'Continue'",
            "$global:ProgressPreference = 'SilentlyContinue'",
            "$global:DebugPreference = 'Continue'",
            "$global:VerbosePreference = 'Continue'",
            "$global:InformationPreference = 'Continue'",

            "cd {{user `os.tmpdir`}}",

            "$cmd = 'scripts/windows-update.ps1'",
            "\"$cmd\" | Write-Verbose",
            "& $cmd -Install -RecurseCycle 3 | Out-Host"
        ]
    },
    {
        "type"                  : "windows-restart",
        "restart_timeout"       : "{{user `reboot.timeout`}}"
    },
    {
        "type"                  : "powershell",
        "elevated_user"         : "{{user `image.login`}}",
        "elevated_password"     : "{{.WinRMPassword}}",
        "inline" : [
            "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
            "$global:ConfirmPreference = 'None'",
            "$global:ErrorActionPreference = 'Continue'",
            "$global:ProgressPreference = 'SilentlyContinue'",
            "#$global:DebugPreference = 'Continue'",
            "$global:VerbosePreference = 'Continue'",
            "$global:InformationPreference = 'Continue'",

            "cd {{user `os.tmpdir`}}",

            "#mossc errors 2019_09_09",
            "#$cmd = 'scripts/compile-dotnet.ps1'",
            "#\"$cmd\" | Write-Verbose",
            "#& $cmd | Out-Host",

            "#mossc errors 2019_09_09",
            "$cmd = 'scripts/fix-crypto.ps1'",
            "\"$cmd\" | Write-Verbose",
            "#FIXME no longer works (071519)",
            "#& $cmd | Out-Host"
        ]
    },
    {
        "type"                  : "ansible",
        "ansible_env_vars" : [
            "ANSIBLE_LOCAL_TEMP={{user `provision.tmpdir`}}",
            "ANSIBLE_NO_LOG=false",
            "ANSIBLE_VERBOSITY={{user `provision.verbose`}}",
            "ANSIBLE_STDOUT_CALLBACK=stderr",
            "ANSIBLE_SSH_RETRIES=3",
            "ANSIBLE_TIMEOUT={{user `ansible.timeout`}}",
            "ANSIBLE_PORT={{user `instance.port`}}",
            "ANSIBLE_USER={{user `image.login`}}",
            "FACTORY_BASEDIR={{user `factory.basedir`}}"
        ],
        "playbook_file"         : "{{user `ansible.basedir`}}/OSCAP/site.yaml",
        "extra_arguments" : [
            "-vvv",
            "--connection", "packer",
            "--skip-tags", "fixme,updates",
            "--extra-vars", "ansible_password={{.WinRMPassword}} ansible_shell_type=powershell ansible_shell_executable=None"
        ]
    },
    {
        "type"                  : "powershell",
        "inline" : [
            "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
            "$global:ConfirmPreference = 'None'",
            "$global:ErrorActionPreference = 'Continue'",
            "$global:ProgressPreference = 'SilentlyContinue'",
            "#$global:DebugPreference = 'Continue'",
            "$global:VerbosePreference = 'Continue'",
            "$global:InformationPreference = 'Continue'",

            "cd {{user `os.tmpdir`}}",

            "Optimize-Volume -DriveLetter C -Defrag | Out-Host",

            "$cmd = 'scripts/sysprep.ps1'",
            "\"$cmd\" | Write-Verbose",
            "& $cmd | Out-Host"
        ]
    }
  ],

  "post-processors" : [
    {
        "type"                  : "manifest"
    }
  ]
}
