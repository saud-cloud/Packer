{
  "builders": [
    {
      "ami_description": "{{user `image.description`}}",
      "ami_groups": "{{user `image.groups`}}",
      "ami_name": "{{user `project`}} [{{user `layer`}}-{{user `role`}}] {{user `os.vendor`}} {{user `os.kernel`}}-{{user `os.release`}} ({{user `build.number`}})",
      "ami_regions": "{{user `image.copies`}}",
      "ami_users": "{{user `image.users`}}",
      "associate_public_ip_address": "{{user `net.assign_public_ip`}}",
      "communicator": "winrm",
      "encrypt_boot": "{{user `disk0.encrypt`}}",
      "force_delete_snapshot": "{{user `image.delete_snapshot`}}",
      "force_deregister": "{{user `image.delete_existing`}}",
      "iam_instance_profile": "{{user `instance.iam_profile`}}",
      "instance_type": "{{user `instance.type`}}",
      "launch_block_device_mappings": [
        {
          "delete_on_termination": "{{user `disk0.delete`}}",
          "device_name": "{{user `disk0.device`}}",
          "encrypted": "{{user `disk0.encrypt`}}",
          "no_device": false,
          "volume_size": "{{user `disk0.size`}}",
          "volume_type": "{{user `disk0.type`}}"
        },
        {
          "delete_on_termination": "{{user `disk1.delete`}}",
          "device_name": "{{user `disk1.device`}}",
          "encrypted": "{{user `disk1.encrypt`}}",
          "no_device": "{{user `disk1.disable`}}",
          "volume_size": "{{user `disk1.size`}}",
          "volume_type": "{{user `disk1.type`}}"
        }
      ],
      "region": "{{user `instance.region`}}",
      "run_tags": {
        "Name": "{{build_name}}: {{user `project`}} [{{user `layer`}}-{{user `role`}}]",
        "TSCreatorName"             : "packerexample@enquizit.com",
        "creator-email"             : "packerexample@enquizit.com",
        "uuid": "{{user `provision.uuid`}}"
      },
      "run_volume_tags": {
        "TSCreatorName"             : "packerexample@enquizit.com",
        "creator-email"             : "packerexample@enquizit.com",
        "uuid": "{{user `provision.uuid`}}"
      },
      "security_group_ids": "{{user `net.security_groups`}}",
      "source_ami": "{{user `image.id`}}",
      "source_ami_filter": {
        "filters": {
          "name": "{{user `image.name`}}",
          "root-device-type": "ebs",
          "virtualization-type": "{{ user `image.virt`}}"
        },
        "most_recent": "{{user `image.latest`}}",
        "owners": "{{user `image.owner`}}"
      },
      "ssh_agent_auth": "{{user `instance.ssh.agent_auth`}}",
      "ssh_interface": "{{user `ssh.interface`}}",
      "ssh_keypair_name": "{{user `instance.ssh.keypair`}}",
      "ssh_password": "{{user `instance.ssh.password`}}",
      "ssh_private_key_file": "{{user `instance.ssh.private_key`}}",
      "ssh_timeout": "{{user `connect.timeout`}}",
      "ssh_username": "{{user `image.login`}}",
      "subnet_id": "{{user `net.subnet`}}",
      "tags": {
        "branch": "{{user `build.branch`}}",
        "commit": "{{user `build.commit`}}",
        "layer": "{{user `layer`}}",
        "os.arch": "{{user `os.arch`}}",
        "os.family": "{{user `os.family`}}",
        "os.release": "{{user `os.release`}}",
        "os.vendor": "{{user `os.vendor`}}",
        "project": "{{user `project`}}",
        "role": "{{user `role`}}",
        "version": "{{user `build.number`}}"
      },
      "type": "amazon-ebs",
      "user_data_file": "{{user `factory.basedir`}}/user-data/winrm",
      "vpc_id": "{{user `net.container`}}",
      "winrm_port": "{{user `instance.port`}}",
      "winrm_timeout": "{{user `connect.timeout`}}",
      "winrm_use_ssl": false,
      "winrm_username": "{{user `image.login`}}"
    }
  ],
  "post-processors": [
    {
      "type": "manifest"
    }
  ],
  "provisioners": [
    {
      "destination": "{{user `os.tmpdir`}}",
      "source": "{{user `factory.basedir`}}/scripts",
      "type": "file"
    },
    {
      "inline": [
        "$global:ConfirmPreference = 'None'",
        "$global:ErrorActionPreference = 'Continue'",
        "#$global:DebugPreference = 'Continue'",
        "#$global:VerbosePreference = 'Continue'",
        "$global:InformationPreference = 'Continue'",
        "cd {{user `os.tmpdir`}}",
        "# 2020-09-17 mossc added following lines to get around tls1.2",
        "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
        "$cmd = 'Install-PackageProvider'",
        "$cmdArgs = @{ Name='NuGet'; MinimumVersion='2.8.5.201'; Scope='CurrentUser' }",
        "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "\u0026 $cmd @cmdArgs -Force | Out-Host",
        "#./scripts/package-7zip.ps1",
        "#Import-Module -Name 7Zip4Powershell",
        "# static-linked port of wget",
        "#wget 'https://eternallybored.org/misc/wget/1.20/64/wget.exe'"
      ],
      "type": "powershell"
    },
    {
      "inline": [
        "$global:ConfirmPreference = 'None'",
        "$global:ErrorActionPreference = 'Continue'",
        "$global:ProgressPreference = 'SilentlyContinue'",
        "$global:DebugPreference = 'Continue'",
        "$global:VerbosePreference = 'Continue'",
        "$global:InformationPreference = 'Continue'",
        "cd {{user `os.tmpdir`}}",
        "$cmd = 'scripts/install.ps1'",
        "# any value with spaces or special chars (eg. +/-) MUST be quoted",
        "# ditto empty values which result in dangling '=' cause a parse error.",
        "# TODO use GoLang template IF, or you MUST define all args as ''",
        "$cmdArgs = @{ Name={{user `aws-cli.label`}}; InstallArgs={{user `aws-cli.install.args`}}; FetchArgs={{user `aws-cli.fetch.args`}} }",
        "[String[]] $urls = {{user `aws-cli.url`}}",
        "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "\u0026 $cmd @cmdArgs @urls | Out-Host",
        "#gratuitous on Amazon-supplied AMI",
        "# 2020-05-07 mossc added following lines to get around tls1.2",
        "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
        "Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force",
        "Set-PSRepository -Name PSGallery -InstallationPolicy Trusted",
        "Install-Module PowerShellGet -RequiredVersion 2.2.4 -SkipPublisherCheck",
        "Install-Module -Name AWSPowerShell",
        "$cmdArgs = @{ Name={{user `aws-cloudwatch.label`}}; InstallArgs={{user `aws-cloudwatch.install.args`}}; FetchArgs={{user `aws-cloudwatch.fetch.args`}} }",
        "[String[]] $urls = {{user `aws-cloudwatch.url`}}",
        "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "\u0026 $cmd @cmdArgs @urls | Out-Host",
        "$cmdArgs = @{ Name={{user `aws-ssm.label`}}; InstallArgs={{user `aws-ssm.install.args`}}; FetchArgs={{user `aws-ssm.fetch.args`}} }",
        "[String[]] $urls = {{user `aws-ssm.url`}}",
        "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "\u0026 $cmd @cmdArgs @urls | Out-Host",
        "$cmdArgs = @{ Name={{user `aws-inspector.label`}}; InstallArgs={{user `aws-inspector.install.args`}}; FetchArgs={{user `aws-inspector.fetch.args`}} }",
        "[String[]] $urls = {{user `aws-inspector.url`}}",
        "\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "\u0026 $cmd @cmdArgs @urls | Out-Host"
      ],
      "type": "powershell"
    },
    {
      "inline": [
        "$global:ConfirmPreference = 'None'",
        "$global:ErrorActionPreference = 'Continue'",
        "$global:ProgressPreference = 'SilentlyContinue'",
        "$global:DebugPreference = 'Continue'",
        "$global:VerbosePreference = 'Continue'",
        "$global:InformationPreference = 'Continue'",
        "cd {{user `os.tmpdir`}}",
        "$cmd = 'scripts/install.ps1'",
        "#$cmdArgs = @{ Name={{user `ibm-bigfix.label`}}; InstallArgs={{user `ibm-bigfix.install.args`}}; FetchArgs={{user `ibm-bigfix.fetch.args`}} }",
        "#[String[]] $urls = {{user `ibm-bigfix.url`}}",
        "#\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "##TODO did C:/Program Files/BigFix Enterprise/BES Client/actionsite.afxm get placed?",
        "#\u0026 $cmd @cmdArgs @urls | Out-Host",
        "#$cmdArgs = @{ Name={{user `symantec-endpoint.label`}}; InstallArgs={{user `symantec-endpoint.install.args`}}; FetchArgs={{user `symantec-endpoint.fetch.args`}} }",
        "#[String[]] $urls = {{user `symantec-endpoint.url`}}",
        "#\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "#\u0026 $cmd @cmdArgs @urls | Out-Host",
        "#$cmdArgs = @{ Name={{user `microsoft-sccm.label`}}; InstallCmd={{user `microsoft-sccm.install`}}; InstallArgs={{user `microsoft-sccm.install.args`}}; FetchArgs={{user `microsoft-sccm.fetch.args`}} }",
        "#[String[]] $urls = {{user `microsoft-sccm.url`}}",
        "#\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "#\u0026 $cmd @cmdArgs @urls | Out-Host",
        "#$cmdArgs = @{ Name={{user `hid-activclient.label`}} }",
        "#[String[]] $urls = {{user `hid-activclient.url`}}",
        "#\"$cmd $($cmdArgs.GetEnumerator() | % { \"$($_.Name)='$($_.Value)'\" }) $urls\" | Write-Verbose",
        "#\u0026 $cmd @cmdArgs @urls | Out-Host"
      ],
      "type": "powershell"
    },
    {
      "elevated_password": "{{.WinRMPassword}}",
      "elevated_user": "{{user `image.login`}}",
      "inline": [
        "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
        "$global:ConfirmPreference = 'None'",
        "$global:ErrorActionPreference = 'Continue'",
        "$global:ProgressPreference = 'SilentlyContinue'",
        "$global:DebugPreference = 'SilentlyContinue'",
        "$global:VerbosePreference = 'Continue'",
        "$global:InformationPreference = 'Continue'",
        "cd {{user `os.tmpdir`}}",
        "#TODO replace with debloat-windows/scripts/disable-windows-defender.ps1",
        "$cmd = 'scripts/windows-defender.ps1'",
        "\"$cmd\" | Write-Verbose",
        "\u0026 $cmd | Out-Host",
        "$cmd = 'scripts/windows-update.ps1'",
        "\"$cmd\" | Write-Verbose",
        "\u0026 $cmd -Install -Severity 'Critical,Important' | Out-Host"
      ],
      "type": "powershell"
    },
    {
      "restart_timeout": "{{user `reboot.timeout`}}",
      "type": "windows-restart"
    },
    {
      "elevated_password": "{{.WinRMPassword}}",
      "elevated_user": "{{user `image.login`}}",
      "inline": [
        "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
        "$global:ConfirmPreference = 'None'",
        "$global:ErrorActionPreference = 'Continue'",
        "$global:ProgressPreference = 'SilentlyContinue'",
        "$global:DebugPreference = 'Continue'",
        "$global:VerbosePreference = 'Continue'",
        "$global:InformationPreference = 'Continue'",
        "cd {{user `os.tmpdir`}}",
        "$cmd = 'scripts/windows-update.ps1'",
        "\"$cmd\" | Write-Verbose",
        "\u0026 $cmd -Install -RecurseCycle 3 | Out-Host"
      ],
      "type": "powershell"
    },
    {
      "restart_timeout": "{{user `reboot.timeout`}}",
      "type": "windows-restart"
    },
    {
      "elevated_password": "{{.WinRMPassword}}",
      "elevated_user": "{{user `image.login`}}",
      "inline": [
        "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
        "$global:ConfirmPreference = 'None'",
        "$global:ErrorActionPreference = 'Continue'",
        "$global:ProgressPreference = 'SilentlyContinue'",
        "#$global:DebugPreference = 'Continue'",
        "$global:VerbosePreference = 'Continue'",
        "$global:InformationPreference = 'Continue'",
        "cd {{user `os.tmpdir`}}",
        "#mossc errors 2019_09_09",
        "#$cmd = 'scripts/compile-dotnet.ps1'",
        "#\"$cmd\" | Write-Verbose",
        "#\u0026 $cmd | Out-Host",
        "#mossc errors 2019_09_09",
        "$cmd = 'scripts/fix-crypto.ps1'",
        "\"$cmd\" | Write-Verbose",
        "#FIXME no longer works (071519)",
        "#\u0026 $cmd | Out-Host"
      ],
      "type": "powershell"
    },
    {
      "inline": [
        "#TODO  key off of provision.debug,verbose, convert this to 'env.ps1'",
        "$global:ConfirmPreference = 'None'",
        "$global:ErrorActionPreference = 'Continue'",
        "$global:ProgressPreference = 'SilentlyContinue'",
        "#$global:DebugPreference = 'Continue'",
        "$global:VerbosePreference = 'Continue'",
        "$global:InformationPreference = 'Continue'",
        "cd {{user `os.tmpdir`}}",
        "Optimize-Volume -DriveLetter C -Defrag | Out-Host",
        "$cmd = 'scripts/sysprep.ps1'",
        "\"$cmd\" | Write-Verbose",
        "\u0026 $cmd | Out-Host"
      ],
      "type": "powershell"
    }
  ],
  "variables": {
    "ansible.basedir": null,
    "ansible.timeout": "90",
    "build.branch": "{{env `BUILD_BRANCH`}}",
    "build.commit": "{{env `BUILD_COMMIT`}}",
    "build.number": "{{env `BUILD_NUMBER`}}",
    "comment_debug": "FIXME expose .Debug from Packer internals",
    "comment_tmpdir": "FIXME expose .TmpDir from packer.ConfigTmpDir()",
    "connect.timeout": "10m",
    "disk0.delete": "true",
    "disk0.device": "/dev/xvda",
    "disk0.encrypt": "false",
    "disk0.size": "0",
    "disk0.type": "gp2",
    "disk1.delete": "false",
    "disk1.device": "/dev/xvdf",
    "disk1.disable": "false",
    "disk1.encrypt": "false",
    "disk1.size": "4",
    "disk1.type": "gp2",
    "factory.basedir": null,
    "image.copies": "",
    "image.delete_existing": "false",
    "image.delete_snapshot": "true",
    "image.groups": "",
    "image.id": null,
    "image.latest": "true",
    "image.login": null,
    "image.name": null,
    "image.users": "",
    "image.virt": "hvm",
    "instance.iam_profile": "",
    "instance.port": "5985",
    "instance.region": null,
    "instance.ssh.agent_auth": "false",
    "instance.ssh.keypair": "",
    "instance.ssh.password": "",
    "instance.ssh.private_key": "",
    "instance.type": "t2.large",
    "instance.winrm.use_ssl": "false",
    "layer": "base",
    "net.assign_public_ip": "false",
    "net.container": "",
    "net.security_groups": "",
    "net.ssh_interface": "",
    "net.subnet": "",
    "os.arch": null,
    "os.pkg.cmd": null,
    "os.pkg.suffix": null,
    "os.release": null,
    "os.repo": "",
    "os.repo.cmd": "",
    "os.repo.version": "",
    "os.tmpdir": null,
    "os.vendor": null,
    "packer.version": ">= 1.2",
    "project": null,
    "provision.debug": "0",
    "provision.shebang": "/bin/bash -e",
    "provision.tmpdir": "{{env `TEMP`}}",
    "provision.uuid": "{{env `PACKER_RUN_UUID`}}",
    "provision.verbose": "0",
    "reboot.timeout": "45m",
    "role": "none"
  }
}

