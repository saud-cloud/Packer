# Simplify command-line for 'wrapper.sh' and/or 'create-image.sh'
# very useful if inputs are maintained outside of source tree
#

# pre-requisite variables
: ${_prog:?}
: ${_progdir:?}
: ${_PROGDIR:?}

# Top-level directory of 'ami-factory'
FACTORY_BASEDIR=`dirname "$_PROGDIR"`

# template and var-file collection
#PACKER_BASEDIR=`dirname "$_progdir"`/packer

# ChefDK and Kitchen
#CHEFDK=
#CHEF_BASEDIR=

# PuppetLabs ModulePath collection
#PUPPET_BASEDIR=

# Ansible Playbook collection
ANSIBLE_BASEDIR=`dirname "$_progdir"`/ansible

# PACKER_TMP_DIR deprecated(?) since v1.2 (https://github.com/hashicorp/packer/pull/7102)
#export TMPDIR=`mktemp -d`
#trap "[ -n $ABORT ] || rm -fr ${TMPDIR:=/var/tmp/packer.$$" EXIT
#PROVISION_TMPDIR=

DIRS=( {FACTORY,PACKER,CHEF,PUPPET,ANSIBLE}_BASEDIR PROVISION_TMPDIR )

: ${BUILD_NUMBER:=`date "+%F.%H%M"`}
: ${BUILD_BRANCH:=`git rev-parse --abbrev-ref HEAD 2>/dev/null`}
: ${BUILD_COMMIT:=`git log -1 --date=iso --pretty="tformat:%cn %h %cd" 2>/dev/null`}
export ${!BUILD_*}


# Feel free to organize JSON fragments according to any desired schema.
# Typically used to specify recipes when provisioning with Chef/Puppet/Ansible.
#
# Priority (config_file < environment < command_line flags) requires strict adherance
# to BASH Parameter Expansion syntax since '-c' is processed in order of flag invocation
# which may well be AFTER other command-line args have set the supported keywords.
# https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
#
# Assumes filenames are relative to PACKER_BASEDIR unless leading '/'
#
# automatically supported keywords: BUILDER REGION IMAGE PROJECT LAYER ROLE

: ${BUILDER:=builder/amazon-ebs}
#: ${REGION:=us-east-1}

[ -n "$IMAGE" ] || IMAGE=( platform/windows image/windows-2016 )

# top-level settings (eg. Organization Unit, Application)
[ -n "$PROJECT" ] || PROJECT=( project/{default,$_prog} )

# eg. web-tier, app-tier, database, public, private
[ -n "$LAYER" ] || LAYER=( layer/base )

# eg. oracle, tomcat, apache, nginx, jumphost
[ -n "$ROLE" ] || ROLE=()

NETWORK=network/vpc-09226a292c2a00415
DISK=( disk/disk{0,1} )

# TODO: an embedded '+' will invoke Key/Value merge but if keys overlap then LAST wins.

# Combine all the above into an ordered list
# NOTICE! ordering is important since last-match wins!
VARFILES=( $NETWORK ${DISK[@]} vars/{aws-{cli,cloudwatch,inspector,ssm},ibm-bigfix,symantec-endpoint,microsoft-sccm,hid-activclient}_windows )

# Hash/Map looks nicer but harder to work with, KISS
#declare -A VARS=(
#    [vpc]=vpc-09ec17ecb60fbade0 
#    [subnet]=subnet-07f09998174edaaa9
#    [security_groups]=sg-070ce851e0629a29a

#-----

TEMPLATE=templates/base-windows.json
