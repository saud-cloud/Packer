AWSTemplateFormatVersion: 2010-09-09
Description: Attach IAM Role to an EC2
Parameters:
  KeyName:
    Description: EC2 Instance SSH Key
    Type: 'AWS::EC2::KeyPair::KeyName'
  MyIp:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: Specify your Ip here eg (39.45.142.90/32)
    Type: String
  InstanceType:
    Description: EC2 instance specs configuration
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  PublicVPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: Subnet IDs
  PublicSubnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Subnet IDs
Mappings:
  AMIs:
    us-east-1:
      Name: ami-0c94855ba95c71c99
    us-east-2:
      Name: ami-c5062ba0
    eu-west-1:
      Name: ami-acd005d5
    ap-southeast-2:
      Name: ami-8536d6e7
Resources:
  TestEc2:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref PublicSubnet
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap 
        - AMIs
        - !Ref 'AWS::Region'
        - Name
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Sub': >
          #!/bin/bash -xe

          exec > >(tee /var/log/user-data.log|logger -t user-data -s
          2>/dev/console) 2>&1

          sudo yum install -y aws-cfn-bootstrap 

          sudo yum install -y git 

          sudo yum install -y yum-utils 

          sudo yum-config-manager --add-repo
          https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo

          sudo yum install -y  packer

          sudo amazon-linux-extras install epel

          sudo yum --enablerepo=epel -y install ansible
      IamInstanceProfile: !Ref PackerInstanceProfile
      SecurityGroupIds:
        - !GetAtt 
          - SGBase
          - GroupId
      Tags:
        - Key: Name
          Value: Test
  SGBase:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH access from specific ip addresses 
        
      VpcId: !Ref PublicVPC
      Tags:
        - Key: Name
          Value: SGBase
  SGBaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGBase
      FromPort: '3389'
      ToPort: '3389'
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt 
        - SGBase
        - GroupId
  SGBaseIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGBase
      Description:  ssh using your own Ip address from port 22 
      FromPort: '22'
      ToPort: '22'
      IpProtocol: tcp
      CidrIp: !Ref MyIp
  SGBaseIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGBase
      Description: Allows every one to ssh in to the ec2 using enquizit office IP 
      FromPort: '22'
      ToPort: '22'
      IpProtocol: tcp
      CidrIp: 174.64.50.214/32
  SGBaseIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGBase
      FromPort: '22'
      ToPort: '22'
      IpProtocol: tcp
      Description: Allows you to ssh in to the ec2 instance if you have the current security group attached 
      SourceSecurityGroupId: !GetAtt 
        - SGBase
        - GroupId
  SGBaseIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGBase
      FromPort: '5986'
      ToPort: '5986'
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt 
        - SGBase
        - GroupId
  SGBaseIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGBase
      FromPort: '5985'
      ToPort: '5985'
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt 
        - SGBase
        - GroupId
  PackerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref PackerInstanceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b0613c24-d097-4845-b671-54a2ff05ad10
  PackerInstancePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: PackerInstancePolicy
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeImageAttribute'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeRegions'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeSecurityGroups'
              - 'sts:DecodeAuthorizationMessage'
            Resource: '*'
            Effect: Allow
            Sid: wildcardReadOnly
          - Action:
              - 'ec2:CreateImage'
              - 'ec2:CopyImage'
              - 'ec2:RegisterImage'
              - 'ec2:DeregisterImage'
              - 'ec2:CreateKeyPair'
              - 'ec2:DeleteKeyPair'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:CreateSnapshot'
              - 'ec2:CreateTags'
              - 'ec2:CreateVolume'
              - 'ec2:ModifyImageAttribute'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:GetPasswordData'
            Resource: '*'
            Effect: Allow
            Sid: wildcardWrite
          - Action:
              - 'ec2:DeleteVolume'
              - 'ec2:ModifySnapshotAttribute'
              - 'ec2:DeleteSnapshot'
              - 'ec2:RebootInstances'
              - 'ec2:TerminateInstances'
              - 'ec2:StopInstances'
            Resource:
              - 'arn:aws:ec2:*:*:snapshot/*'
              - 'arn:aws:ec2:*:*:instance/*'
              - 'arn:aws:ec2:*:*:volume/*'
            Effect: Allow
            Sid: InstanceDisk
          - Condition:
              StringEquals:
                'ec2:ResourceTag/owner': Packer.IO
              StringLike:
                'ec2:Vpc': 'arn:aws:ec2:*:*:vpc/vpc-c0e064bb'
            Action:
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:AuthorizeSecurityGroupEgress'
              - 'ec2:DeleteSecurityGroup'
            Resource: '*'
            Effect: Allow
            Sid: ManageSecurityGroups
          - Action:
              - 'iam:PassRole'
              - 'iam:GetInstanceProfile'
            Resource: 'arn:aws:iam::224233068863:role/ami-builder'
            Effect: Allow
            Sid: IAMPassroleToInstance
          - Action:
              - 'iam:PassRole'
              - 'iam:CreateInstanceProfile'
              - 'iam:DeleteInstanceProfile'
              - 'iam:GetRole'
              - 'iam:GetInstanceProfile'
              - 'iam:DeleteRolePolicy'
              - 'iam:RemoveRoleFromInstanceProfile'
              - 'iam:CreateRole'
              - 'iam:DeleteRole'
              - 'iam:PutRolePolicy'
              - 'iam:AddRoleToInstanceProfile'
            Resource: '*'
            Effect: Allow
            Sid: PackerIAMCreateRole
          - Condition:
              StringEquals:
                'ec2:ResourceTag/owner': Packer.IO
              StringLikeIfExists:
                'ec2:Vpc': 'arn:aws:ec2:*:*:vpc/vpc-c0e064bb'
            Action:
              - 'ec2:AttachVolume'
              - 'ec2:DetachVolume'
            Resource:
              - 'arn:aws:ec2:*:*:instance/*'
              - 'arn:aws:ec2:*:*:volume/*'
            Effect: Allow
            Sid: VolumeActions
          - Action: 'ec2:RunInstances'
            Resource:
              - 'arn:aws:ec2:*:*:instance/*'
              - 'arn:aws:ec2:*:*:key-pair/*'
            Effect: Allow
            Sid: RunInstances
          - Condition:
              StringLike:
                'ec2:Vpc': 'arn:aws:ec2:*:*:vpc/vpc-c0e064bb'
            Action: 'ec2:RunInstances'
            Resource:
              - 'arn:aws:ec2:*:*:subnet/*'
              - 'arn:aws:ec2:*:*:network-interface/*'
              - 'arn:aws:ec2:*:*:security-group/*'
            Effect: Allow
            Sid: RunInstancesNetwork
          - Action: 'ec2:RunInstances'
            Resource:
              - 'arn:aws:ec2:*:*:image/*'
              - 'arn:aws:ec2:*:*:volume/*'
              - 'arn:aws:ec2:*:*:snapshot/*'
            Effect: Allow
            Sid: RunInstanceDisk
      Roles:
        - !Ref PackerInstanceRole
  builderclientpolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: builder-client-policy1
      PolicyDocument:
        Statement:
          - Sid: LimitedRead
            Effect: Allow
            Action:
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeVolumeStatus'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeKeyPairs'
              - 'ec2:DescribeSnapshotAttribute'
              - 'ec2:DescribeVolumeAttribute'
              - 'ec2:DescribeImageAttribute'
              - 'ec2:DescribeVpcEndpoints'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeInstanceAttribute'
              - 'ec2:DescribeRegions'
              - 'ec2:DescribeVpcAttribute'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeNetworkInterfaceAttribute'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeTags'
            Resource: '*'
            Condition:
              StringLikeIfExists:
                'ec2:Vpc': 'arn:aws:ec2:224233068863:*:vpc/vpc-c0e064bb'
              StringEqualsIfExists:
                'ec2:ResourceTag/owner': Packer.IO
                'ec2:Region': us-east-1
      Roles:
        - !Ref BuilderInstanceRole
  BuilderInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Builder-Client-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  PackerInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Packer-Golden-Ami-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
    
  BuilderInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: Builder-Client-Role
      Path: /
      Roles: 
        - Ref: "BuilderInstanceRole"
Outputs:
  EC2:
    Description: EC2 IP address
    Value: !Join 
      - ''
      - - ssh ec2-user@
        - !GetAtt 
          - TestEc2
          - PublicIp
        - ' -i '
        - !Ref KeyName
        - .pem
