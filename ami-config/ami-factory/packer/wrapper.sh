#!/bin/bash
# This is quick convenience script to drive 'create-image.sh' without having to
# construct long, complicated command-lines nor fully grok the directory structure.
#
# TODO - Do NOT edit this file - create $0.conf to define variables


_prog="${BASH_SOURCE##*/}"
_progdir=$( cd `dirname "$BASH_SOURCE"`; pwd )
_PROG=`readlink -e "$BASH_SOURCE"` || {
    # impossible error
    >&2 echo "ERROR: $0 has broken link component"
    exit 1
  }
_PROGDIR="${_PROG%/*}"

source "$_PROGDIR/functions"

declare -a _varfiles=()
_cmd=validate

# safety-check
case ${1#--} in
    build|fix|inspect|validate)
        _cmd=$1; shift
        ;;
    version|help)
        error "Unsupported command ($1)"
        ;;
    # blindly assume arguments are VAR or VARFILES
esac

# Use (external) directories to break out multiple configurations as opposed
# to in-tree branches for simpler management and code re-use.

[ "${_prog##*/}" = "${_PROG##*/}" ] || {
    source "${CONFIG:=$_progdir/${_prog%.sh}.conf}" || error "configuration not found ($CONFIG)"
  }


# This is a legacy crutch - please use $BASH_SOURCE.conf instead
OS="${OS,,}"
case "$OS" in
    amazon-linux|amzn|amzn1)
        _repo_ver=6
        _varfiles+=('image/amazon-amzn')
        OS="amazon-${OS#*-}"
        ;;&
    amazon-linux2|amzn2)
        _repo_ver=7
        _varfiles+=('image/amazon-amzn2')
        OS="amazon-${OS#*-}"
        ;;&
    # sles
    *centos[5-7]|*rhel[5-7])
        _varfiles+=("image/redhat-${OS#*-}")
        ;&
    redhat-*|amazon-*)
	_varfiles+=('platform/redhat.json')
#TODO use a dynamic vars/chefdk-*.json file and have 'wget' that
#  fetches the RPM/DEB also grab the sha256 value derived from URL
#	_chefdk="vars/chefdk-${CHEFDK}_el${_repo_ver:-${OS: -1}}.json"
        ;;&
#TODO
#    ubuntu-xenial|debian-jessie)
#        _varfiles+=("image/redhat-${OS#*-}")
#        _repo_ver=8
#        ;&
#    debian-*|ubuntu-*)
#        _varfiles+="platform/debian.json"
#        _chefdk="vars/chefdk-${CHEFDK}_debian${_repo_ver:?}.json"
#        ;;&
    [wW]indows-*)
        _varfiles+=("image/$OS.json")
        _varfiles+=('platform/windows.json')
#        _chefdk="vars/chefdk-${CHEFDK}_${OS,,}.json"
        ;;
    *)  _varfiles+=('platform/linux.json')
esac
_varfiles+=(disk/disk0.json)

# append because Last-Match wins
_varfiles+=("${VARFILES[@]}")


# FIXME this belongs in create-image.sh
# if $TEMPLATE has '+' then split args and join with YamlReader to temporary file
#grep -vq --fixed-strings + <<< "$TEMPLATE" || (
#  set -- ${TEMPLATE/+/ }
#  echo "merging files: $@"
#)

#FIXME why do we care?
#: ${BASEDIR:=${_PROGDIR%/*}}      # sensible default

# user variables are LAST match wins so ordering is important!
#XXX '-tlR' are temporaryly hard-coded for convenience
#TODO deal with BUILDER, DISK, PROVISIONER, and all the other flags in create-image.sh?
# why not fold most of this file into create-image then? And write it as a simple
# components list (key off $0 name in case?) that has basically no logic but 'hard-codes' all needed args to create-image?

${DEBUG:+ runv} $_PROGDIR/create-image.sh ${_cmd:?} "${_varfiles[@]}" "$@"

unset ${!_*}

